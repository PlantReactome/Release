/*
 * Created on Dec 15, 2005
 */
package org.gk.IDGeneration;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.gk.model.GKInstance;
import org.gk.persistence.MySQLAdaptor;
import org.gk.schema.InvalidAttributeException;
import org.gk.schema.Schema;
import org.gk.schema.SchemaClass;
import org.gk.util.GKApplicationUtilities;

/** 
 *  This is the main class for the IDGeneration program,
 *  using a command line interface.  Usage:
 *  
 *  java org.gk.IDGeneration.IDGenerationCommandLine <options>
 *  
 *  The following options are available:
 *  
 *  -o orthology mode - tries to find stable IDs for orthology
 *     predicted instances in the release.
 *  -f force all questions to be answered with "yes"
 *     (allows non-interactive use)
 *  -t run in test mode (nothing inserted into datbases)
 *  -h <hostname> default hostname for all databases (e.g. picard.ebi.ac.uk)
 *  -u <username> default user name for all databases (you may not need to specify this at all)
 *  -p <port> default port for all databases (e.g. 3306)
 *  -P <password> default password for all databases (you may not need to specify this at all)
 *  -prnum <release> release number of previous release (e.g. 19)
 *  -cdbname <db name> database name of current slice (e.g. test_slice_20)
 *  -crdbname <db name> database name of current release (e.g. test_ortho_20)
 *  -crnum <release> release number of current release (e.g. 20)
 *  -idbname <db name> database name of identifier database (e.g. test_reactome_stable_identifiers)
 *  -gdbname <db name> database name of gk_central
 *  -s <schema classes> comma-separated list of schema classes
 *     e.g. Pathway,Reaction (leaving this option out causes all default schema classes to be used)
 *  -signore <attributes> comma-separated list of attributes to ignore while determining version number if the schema changes
 *     e.g. _doRelease,_class (leaving this option out causes all attributes to be used)
 *   -nullify Replace username and password with NULL in the identifier database, if requested.
 *    This is for security reasons.
 *  -project <project name> your project - not needed for human Reactome, but needed for other Reactomes (e.g. FlyReactome).
 *  
 *  If you intend to run the program without human supervision
 *  (e.g. in a script) you should include the -f option
 *  in the command line, otherwise the program will get
 *  stuck as soon as it tries to interact with the user.
 *  
 *  If problems occur during ID generation, they will be
 *  reported on STDERR.  If the program runs successfully
 *  to completion, the results of the internally executed
 *  tests will be printed out, giving a summary of the
 *  ID generation process.
 *  
 * @author croft
 */
public class IDGenerationCommandLine {
	private IncludeInstances includeInstances;
	private boolean force;
	private boolean testMode;
	private boolean orthologyMode;
	private boolean nullifyUserAndPassword;
	private String previousReleaseNum;
	private String currentReleaseNum;
	private String currentReleaseDateTime;
	private String projectName;
	private GKInstance project;
	private DbParams currentSliceDbParams;
	private DbParams currentReleaseDbParams;
	private DbParams identifierDbParams;
	private DbParams gk_centralDbParams;
	private List schemaClasseNames;
	private List schemaChangeIgnoredAttributes;
	private IdentifierDatabase identifierDatabase = new IdentifierDatabase();
	
	public IDGenerationCommandLine() {
		init();
	}
	
	public boolean isForce() {
		return force;
	}

	public void setForce(boolean force) {
		this.force = force;
	}

	public boolean isTestMode() {
		return testMode;
	}

	public void setTestMode(boolean testMode) {
		this.testMode = testMode;
	}

	public boolean isOrthologyMode() {
		return orthologyMode;
	}

	public void setOrthologyMode(boolean orthologyMode) {
		this.orthologyMode = orthologyMode;
	}

	public boolean isNullifyUserAndPassword() {
		return nullifyUserAndPassword;
	}

	public void setNullifyUserAndPassword(boolean nullifyUserAndPassword) {
		this.nullifyUserAndPassword = nullifyUserAndPassword;
	}

	public void setHostname(String hostname) {
		if (currentSliceDbParams.hostname.equals(""))
			currentSliceDbParams.hostname = hostname;
		if (currentReleaseDbParams.hostname.equals(""))
			currentReleaseDbParams.hostname = hostname;
		if (identifierDbParams.hostname.equals(""))
			identifierDbParams.hostname = hostname;
		if (gk_centralDbParams.hostname.equals(""))
			gk_centralDbParams.hostname = hostname;
	}

	public void setPassword(String password) {
		if (currentSliceDbParams.password.equals(""))
			currentSliceDbParams.password = password;
		if (currentReleaseDbParams.password.equals(""))
			currentReleaseDbParams.password = password;
		if (identifierDbParams.password.equals(""))
			identifierDbParams.password = password;
		if (gk_centralDbParams.password.equals(""))
			gk_centralDbParams.password = password;
	}

	public void setPort(String port) {
		if (currentSliceDbParams.port.equals(""))
			currentSliceDbParams.port = port;
		if (currentReleaseDbParams.port.equals(""))
			currentReleaseDbParams.port = port;
		if (identifierDbParams.port.equals(""))
			identifierDbParams.port = port;
		if (gk_centralDbParams.port.equals(""))
			gk_centralDbParams.port = port;
	}

	public void setUsername(String username) {
		if (currentSliceDbParams.username.equals(""))
			currentSliceDbParams.username = username;
		if (currentReleaseDbParams.username.equals(""))
			currentReleaseDbParams.username = username;
		if (identifierDbParams.username.equals(""))
			identifierDbParams.username = username;
		if (gk_centralDbParams.username.equals(""))
			gk_centralDbParams.username = username;
	}

	public String getPreviousReleaseNum() {
		return previousReleaseNum;
	}

	public void setPreviousReleaseNum(String previousReleaseNum) {
		this.previousReleaseNum = previousReleaseNum;
	}

	public String getCurrentReleaseNum() {
		return currentReleaseNum;
	}

	public void setCurrentReleaseNum(String currentReleaseNum) {
		this.currentReleaseNum = currentReleaseNum;
	}

	public String getProjectName() {
		return projectName;
	}

	public void setProjectName(String projectName) {
		this.projectName = projectName;
	}

	public List getSchemaClasseNames() {
		return schemaClasseNames;
	}

	public void setSchemaClasseNames(List schemaClasses) {
		this.schemaClasseNames = schemaClasses;
	}

	public List getSchemaChangeIgnoredAttributes() {
		return schemaChangeIgnoredAttributes;
	}

	public void setSchemaChangeIgnoredAttributes(List schemaChangeIgnoredAttributes) {
		this.schemaChangeIgnoredAttributes = schemaChangeIgnoredAttributes;
	}

	private void init() {
		includeInstances = new IncludeInstances();
		force = false;
		testMode = false;
		schemaClasseNames = new ArrayList();
		schemaChangeIgnoredAttributes = new ArrayList();
		currentSliceDbParams = new DbParams();
		currentReleaseDbParams = new DbParams();
		identifierDbParams = new DbParams();
		gk_centralDbParams = new DbParams();
		
		// Put the current date/time into this parameter,
		// just to make sure that something half sensible
		// is there.  The user can always change it by hand
		// in the SQL if it needs a different value.
		currentReleaseDateTime = GKApplicationUtilities.getDateTime();
	}
	
    public void run() {
    	// Check arguments
    	if (!testMode)
    		handleYesNo("Running this program will change live databases irreversibly.");
    	
    	if (orthologyMode) {
	    	identifierDatabase.setUsername(currentReleaseDbParams.username);
	    	identifierDatabase.setPassword(currentReleaseDbParams.password);
    	} else {
	    	identifierDatabase.setUsername(currentSliceDbParams.username);
	    	identifierDatabase.setPassword(currentSliceDbParams.password);
    	}
    	
		MySQLAdaptor identifierDbParamsDba = identifierDbParams.getDba();
		if (identifierDbParamsDba==null)
			handleError("Could not create connection to identifier database - maybe you entered the wrong parameters?");
		IdentifierDatabase.setDba(identifierDbParamsDba);
    	
    	// Set default project to be homo sapiens
		project = null;
    	if (projectName==null)
    		projectName = IdentifierDatabase.getDefaultProjectName();
    	Collection projects = null;
		try {
			// Make sure that project name is valid
			projects = identifierDbParamsDba.fetchInstancesByClass("Project");
		} catch (Exception e1) {
			handleError("Could not extract Project instances from identifier database");
		}
		try {
			String listProjectName;
			GKInstance listProject;
			boolean foundProjectFlag = false;
			String projectNames = "";
			for (Iterator it = projects.iterator(); it.hasNext();) {
				listProject = (GKInstance)it.next();
				listProjectName = (String)listProject.getAttributeValue("name");
				if (listProjectName.equals(projectName)) {
					project = listProject;
					foundProjectFlag = true;
				}
				projectNames += "\t" + listProjectName + "\n";
			}
			if (!foundProjectFlag)
				handleError("Unknown project: " + projectName + ", known projects are:\n" + projectNames);
		} catch (InvalidAttributeException e1) {
			handleError("Problem retrieving project names");
			e1.printStackTrace();
		} catch (Exception e1) {
			handleError("Problem retrieving project names");
			e1.printStackTrace();
		}

    	int previousReleaseNumInt = (-1);
    	int currentReleaseNumInt = (-1);
    	
		if (previousReleaseNum==null)
	    	handleYesNo("You have not specified a previous release, new stable IDs will be created from scratch.");
		else {
			// Check that the user entered a sensible number format
	    	try {
				previousReleaseNumInt = (new Integer(previousReleaseNum)).intValue();
				if (previousReleaseNumInt<1)
					handleError("Invalid previous release number " + previousReleaseNum);
			} catch (NumberFormatException e) {
				handleError("Previous release number (" + previousReleaseNum + ")is not recognisably numeric");
			}
		}

		if (currentReleaseNum==null)
	    	handleError("You have not specified a current release, aborting!");
		else {
			// Check that the user entered a sensible number format
			try {
				currentReleaseNumInt = (new Integer(currentReleaseNum)).intValue();
				if (currentReleaseNumInt<1)
					handleError("Invalid current release number " + currentReleaseNum);
			} catch (NumberFormatException e) {
				handleError("Previous release number (" + currentReleaseNum + ")is not recognisably numeric");
			}
		}
		
		if (previousReleaseNum!=null && currentReleaseNumInt - previousReleaseNumInt != 1)
			handleYesNo("Current release (" + currentReleaseNum + ") is not a direct successor of previous release (" + previousReleaseNum + ").");

    	// In "orthologyMode", look into release databases (rather than the
    	// default slice databases) for matching orthologous events that
    	// could be assigned stable IDs.
    	if (orthologyMode) {
    		identifierDatabase.setDbParamsAttribute(IdentifierDatabase.RELEASE);
    	}

		String lastNonNullReleaseNum = IdentifierDatabase.getLastNonNullReleaseNum(projectName);
		try {
			int lastNonNullReleaseNumInt = (new Integer(lastNonNullReleaseNum)).intValue();
			if (currentReleaseNumInt<lastNonNullReleaseNumInt)
				handleYesNo("Current release (" + currentReleaseNum + ") is not the last in the release list (" + lastNonNullReleaseNum + ").");
		} catch (NumberFormatException e) {
		}
		
    	// Set up a database adaptor for the previous release,
    	// if one has been specified.
		MySQLAdaptor previousDba = identifierDatabase.getReleaseDbaFromReleaseNum(previousReleaseNum, projectName);
		if (previousDba==null && previousReleaseNum!=null)
			handleError("Cannot find a previous release, with release number " + previousReleaseNum);
		
		// Check to see if the current release already exists (it shouldn't)
		MySQLAdaptor currentDba = identifierDatabase.getReleaseDbaFromReleaseNum(currentReleaseNum, projectName);
		if (currentDba!=null)
			handleError("Release " + currentReleaseNum + " already exists, cannot overwrite!");
		
		currentDba = null;
    	if (orthologyMode)
			currentDba = currentReleaseDbParams.getDba();
    	else
    		currentDba = currentSliceDbParams.getDba();
		if (currentDba==null)
			handleError("Could not create connection to current release database - maybe you entered the wrong parameters?");
		MySQLAdaptor gk_centraldba = null;			
		if (gk_centralDbParams.dbName!=null && !(gk_centralDbParams.dbName.equals(""))) {
			gk_centraldba = gk_centralDbParams.getDba();			
			if (gk_centraldba==null)
				handleError("Could not create connection to " + gk_centralDbParams.dbName + " - maybe you entered the wrong parameters?");
		}
		
    	PreviousInstanceFinder previousInstanceFinder = new DbIdPreviousInstanceFinder(currentReleaseNum, previousDba, true, identifierDatabase);
    	// In "orthologyMode", find previous instances via orthologous
    	// event attributes, rather than by DB_ID
    	if (orthologyMode) {
    		previousInstanceFinder = new OrthologousEventPreviousInstanceFinder(currentReleaseNum, previousDba, true, identifierDatabase);
    	}
    	
		// Create a new release and add it to the identifier database
    	setCurrentReleaseParams();
    	
    	// Use the default class set if the user hasn't explicitly
    	// specified which classes should be used for stable ID
    	// generation.
    	if (schemaClasseNames.size()==0) {
    		String[] defaultClasses = includeInstances.getDefaultClasses();
    		for (int i=0; i<defaultClasses.length; i++)
    			schemaClasseNames.add(defaultClasses[i]);
    	}
    	
    	// Replace schema class names with true schema classes
    	List schemaClasses = new ArrayList();
    	try {
			Schema currentSchema = currentDba.fetchSchema();
			String schemaClassName;
			SchemaClass schemaClass;
			for (Iterator itc = schemaClasseNames.iterator(); itc.hasNext();) {
				schemaClassName = (String)itc.next();
				schemaClass = currentSchema.getClassByName(schemaClassName);
				if (schemaClass==null)
					handleError("Schema class " + schemaClassName + " not known in current release, dbname=" + currentDba.getDBName());
				schemaClasses.add(schemaClass);
			}
		} catch (Exception e) {
			handleError("Error getting schema classes");
		}

    	
    	// Get the highest level classes that include all of the
    	// classes specified.
    	List rootClasses = includeInstances.extractRootClasses(schemaClasses);
    	
    	// Make sure there are no "forbidden classes" in the list.
    	List cleanClasses = includeInstances.removeForbiddenClasses(schemaClasses);

    	if (gk_centraldba==null)
    		System.out.println("IDGenerationCommandline: before IDGenerator, gk_centraldba is null");
    	else
    		System.out.println("IDGenerationCommandline: before IDGenerator, gk_centraldba is not null");
    	
    	// Now do the actual stable ID generation
		IDGenerator idGenerator = new IDGenerator(previousDba, currentDba, gk_centraldba, identifierDatabase, previousInstanceFinder);
    	idGenerator.generateIDs(cleanClasses, testMode, schemaChangeIgnoredAttributes);
    	
    	// Print out the test results
    	IDGeneratorTests iDGeneratorTests = idGenerator.getTests();
    	System.out.print(iDGeneratorTests.toString());
    }
    
    /**
     * If necessary, creates a new release for the current release number.
     * Inserts appropriate DB parameters for slice and release, if
     * available.  WARNING: prexisting DB parameters will be overwritten.
     *
     */
    private void setCurrentReleaseParams() {
    	GKInstance release;

    	try {
			MySQLAdaptor instanceDatabaseDba = IdentifierDatabase.getDba();
			
			GKInstance sliceDbParams = null;
			GKInstance releaseDbParams = null;

			// First look to see if the release number already exists;
			// don't proceed any further with the method if so.
			Collection releases = instanceDatabaseDba.fetchInstanceByAttribute(IdentifierDatabase.getReleaseTable(), "num", "=", currentReleaseNum);
			if (releases.size()>0)
				release = (GKInstance)releases.toArray()[0];
			else {
				release = IdentifierDatabase.createBlankRelease();
				release.setAttributeValue("num", currentReleaseNum);
				release.setAttributeValue("project", project);
				release.setAttributeValue("dateTime", currentReleaseDateTime);
			}
			
			if (currentSliceDbParams.dbName!=null && !currentSliceDbParams.dbName.equals("") && !orthologyMode) {
				sliceDbParams = new GKInstance();
				sliceDbParams.setSchemaClass(instanceDatabaseDba.getSchema().getClassByName("DbParams"));
				sliceDbParams.setDbAdaptor(instanceDatabaseDba);
				sliceDbParams.setAttributeValue("host", currentSliceDbParams.hostname);
				sliceDbParams.setAttributeValue("dbName", currentSliceDbParams.dbName);
				sliceDbParams.setAttributeValue("port", currentSliceDbParams.port);
		    	// Replace username and password with NULL in the identifier
		    	// database, if requested.  This is for security reasons.
		    	if (nullifyUserAndPassword) {
					sliceDbParams.setAttributeValue("host", "localhost");
					sliceDbParams.setAttributeValue("user", "NULL");
					sliceDbParams.setAttributeValue("pwd", "NULL");
		    	} else {
					sliceDbParams.setAttributeValue("user", currentSliceDbParams.username);
					sliceDbParams.setAttributeValue("pwd", currentSliceDbParams.password);
		    	}
		    	
				instanceDatabaseDba.storeInstance(sliceDbParams);
				release.setAttributeValue("sliceDbParams", sliceDbParams);
			}
			if (currentReleaseDbParams.dbName!=null && !currentReleaseDbParams.dbName.equals("")) {
				releaseDbParams = new GKInstance();
				releaseDbParams.setSchemaClass(instanceDatabaseDba.getSchema().getClassByName("DbParams"));
				releaseDbParams.setDbAdaptor(instanceDatabaseDba);
				releaseDbParams.setAttributeValue("host", currentReleaseDbParams.hostname);
				releaseDbParams.setAttributeValue("dbName", currentReleaseDbParams.dbName);
				releaseDbParams.setAttributeValue("port", currentReleaseDbParams.port);
		    	// Replace username and password with NULL in the identifier
		    	// database, if requested.  This is for security reasons.
		    	if (nullifyUserAndPassword) {
		    		releaseDbParams.setAttributeValue("host", "localhost");
		    		releaseDbParams.setAttributeValue("user", "NULL");
		    		releaseDbParams.setAttributeValue("pwd", "NULL");
		    	} else {
		    		releaseDbParams.setAttributeValue("user", currentSliceDbParams.username);
		    		releaseDbParams.setAttributeValue("pwd", currentSliceDbParams.password);
		    	}
				
				instanceDatabaseDba.storeInstance(releaseDbParams);
				release.setAttributeValue("releaseDbParams", releaseDbParams);
			}
			
			// This stuff has to be inserted into the identifier
			// database, otherwise the rest of the code fails
			// These are new instances, so store them.
			if (releases.size()>0)
				instanceDatabaseDba.updateInstance(release);
			else
				instanceDatabaseDba.storeInstance(release);
		} catch (Exception e) {
			handleError("Problem setting database parameters for the current release");
		}
    }
    
    private void handleError(String text) {
    	System.err.println("IDGenerationCommandLine: " + text);
    	System.exit(1);
    }
    
    private void handleYesNo(String text) {
    	if (force)
    		return;
    	
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println(text);
		System.out.print("Are you sure you want to do this?  (y/n) ");
		String answer = "n";
		try {
			answer = reader.readLine();
		} catch (IOException e) {
		}
		if (answer.equals("n"))
			System.exit(0);
    }
    
    static private void printHelp() {
    	System.out.println("Usage:");
    	System.out.println("");
    	System.out.println("java org.gk.IDGeneration.IDGenerationCommandLine <options>");
    	System.out.println("");
    	System.out.println("The following options are available:");
    	System.out.println("");
    	System.out.println(" -f force all questions to be answered with \"yes\"");
    	System.out.println("    (allows non-interactive use)");
    	System.out.println(" -o create only stable IDs for events derived from");
    	System.out.println("    orthology prediction (uses release DBs)");
    	System.out.println(" -t run in test mode (nothing inserted into datbases)");
    	System.out.println(" -h <hostname> default hostname for all databases (e.g. picard.ebi.ac.uk)");
    	System.out.println(" -u <username> default user name for all databases");
    	System.out.println(" -p <port> default port for all databases");
    	System.out.println(" -P <password> default password for all databases");
    	System.out.println(" -prnum <release> release number of previous release");
    	System.out.println(" -cdbname <db name> database name of current slice (e.g. test_slice_20)");
    	System.out.println(" -crdbname <db name> database name of current release (e.g. test_ortho_20)");
    	System.out.println(" -crnum <release> release number of current release");
    	System.out.println(" -idbname <db name> database name of identifier database");
    	System.out.println(" -gdbname <db name> database name of gk_central");
    	System.out.println(" -s <schema classes> comma-separated list of schema classes");
    	System.out.println("    e.g. Pathway,Reaction (leaving this option out causes all");
    	System.out.println("    default schema classes to be used)");
    	System.out.println(" -signore <attributes> comma-separated list of ignored attributes");
    	System.out.println(" -nullify Replace username and password with NULL in the identifier database, if requested");
    	System.out.println("    This is for security reasons.");
    	System.out.println(" -project <project name> specify your project - not needed for human Reactome, but needed for other Reactomes (e.g. FlyReactome)");
    	
    	System.exit(0);
    }
    
	static public void main(String[] args) {
		IDGenerationCommandLine iDGenerationCommandLine = new IDGenerationCommandLine();
		
		// Parse arguments
		String s;
		for (int i=0; i<args.length; i++) {
			s = args[i];
			if (s.equals("-f"))
				iDGenerationCommandLine.setForce(true);
			else if (s.equals("-o"))
				iDGenerationCommandLine.setOrthologyMode(true);
			else if (s.equals("-t"))
				iDGenerationCommandLine.setTestMode(true);
			else if (s.equals("-nullify"))
				iDGenerationCommandLine.setNullifyUserAndPassword(true);
			else if (s.equals("-h")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setHostname(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-u")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setUsername(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-p")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setPort(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-P")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setPassword(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-prnum")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setPreviousReleaseNum(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-cdbname")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.currentSliceDbParams.dbName = args[i];
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-crdbname")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.currentReleaseDbParams.dbName = args[i];
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-crnum")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.setCurrentReleaseNum(args[i]);
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-idbname")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.identifierDbParams.dbName = args[i];
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-gdbname")) {
				i++;
				if (i<args.length)
					iDGenerationCommandLine.gk_centralDbParams.dbName = args[i];
				else {
					System.err.println("IDGenerationCommandLine: missing argument");
					System.exit(1);
				}
			}
			else if (s.equals("-s")) {
				i++;
				if (i<args.length) {
					String[] splits = args[i].split(",");
					List schemaClasseNames = new ArrayList();
					for (int j=0; j<splits.length; j++)
						schemaClasseNames.add(splits[j]);
					iDGenerationCommandLine.setSchemaClasseNames(schemaClasseNames);
				} else {
					iDGenerationCommandLine.handleError("IDGenerationCommandLine: missing argument");
				}
			}
			else if (s.equals("-signore")) {
				i++;
				if (i<args.length) {
					String[] splits = args[i].split(",");
					List schemaChangeIgnoredAttributes = new ArrayList();
					for (int j=0; j<splits.length; j++)
						schemaChangeIgnoredAttributes.add(splits[j]);
					iDGenerationCommandLine.setSchemaChangeIgnoredAttributes(schemaChangeIgnoredAttributes);
				} else {
					iDGenerationCommandLine.handleError("IDGenerationCommandLine: missing argument");
				}
			}
			else if (s.equals("-project")) {
				i++;
				if (i<args.length) {
					iDGenerationCommandLine.setProjectName(args[i]);
				} else {
					iDGenerationCommandLine.handleError("IDGenerationCommandLine: missing argument");
				}
			}
			else if (s.equals("--help") || s.equals("-help")) {
				iDGenerationCommandLine.printHelp();
			} else
				iDGenerationCommandLine.handleError("Unknown argument" + args[i]);
		}
		
		// Alright, puff, pant, we now have all the things we need
		// to know to actually go ahead and generate stable IDs for
		// the new release.
		iDGenerationCommandLine.run();
	}
	
	/**
	 * Lightweight class for holding parameters for various
	 * databases.
	 * 
	 * @author croft
	 *
	 */
	class DbParams {
		public String dbName = "";
		public String hostname = "";
		public String username = "";
		public String port = "";
		public String password = "";
		
		public MySQLAdaptor getDba() {
			MySQLAdaptor dba = null;
			
			try {
				if (port == null || port.equals(""))
					dba = new MySQLAdaptor(hostname, dbName, username, password);
				else
					dba = new MySQLAdaptor(hostname, dbName, username, password, Integer.parseInt(port));
			} catch (NumberFormatException e) {
				System.err.println("IDGenerationCommandLine.DbParams.getDba: port number is strange: " + port);
				System.err.println("IDGenerationCommandLine.DbParams.getDba: hostname=" + hostname + ", dbName=" + dbName + ", username" + username + ", password=" + password + ", port=" + port);
				e.printStackTrace();
			} catch (SQLException e) {
				System.err.println("IDGenerationCommandLine.DbParams.getDba: something went wrong with mysql");
				System.err.println("IDGenerationCommandLine.DbParams.getDba: hostname=" + hostname + ", dbName=" + dbName + ", username" + username + ", password=" + password + ", port=" + port);
				e.printStackTrace();
			} catch (Exception e) {
				System.err.println("IDGenerationCommandLine.DbParams.getDba: something went wrong");
				System.err.println("IDGenerationCommandLine.DbParams.getDba: hostname=" + hostname + ", dbName=" + dbName + ", username" + username + ", password=" + password + ", port=" + port);
				e.printStackTrace();
			}
			
			return dba;
		}
	}
}
